<script component>

	exports.id = 'crontab'
	exports.name = 'Crontab';
	exports.icon = 'ti ti-clock';
	exports.author = 'Peter Å irka / Total.js';
	exports.version = '1';
	exports.group = 'Triggers';
	exports.config = { random: true, type: 'now', data: '', timers: ['0 9 * * *'], restart: false };
	exports.outputs = [{ id: 'output', name: 'Output' }];
  exports.meta = {readonly: true, remove: false};
	const SharedMemory = REQUIRE('definitions/shared.js');

	exports.make = function(instance, config) {

		var timers = null;
		var days = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];
		var func = {};

		func.cronexec = function(output, date) {

			var m = date.getMinutes();
			var h = date.getHours();
			var d = date.getDate();
			var M = date.getMonth() + 1;
			var day = date.getDay();
			var is = true;
			var values = [m, h, d, M, day];

			for (var i = 0; i < output.length; i++) {

				var val = values[i];
				var m = output[i];

				if (m.type === 'equal') {
					if (m.value !== val) {
						is = false;
						break;
					}
				} else if (m.type === 'every') {
					if (m.value % val !== 0) {
						is = false;
						break;
					}
				} else if (m.type === 'in') {
					if (!m.value.includes(val)) {
						is = false;
						break;
					}
				} else if (m.type === 'between') {
					if (val < m.value[0] || val > m.value[1]) {
						is = false;
						break;
					}
				}
			}

			return is;
		};

		func.cronmake = function(line) {

			// */15 = every 15
			// 1-2  = BETWEEN
			// 1,2  = IN

			var days = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];
			var arr = line.toLowerCase().replace(/[a-z]+/g, text => days.indexOf(text.substring(0, 2))).split(/\s|\t/).trim();
			var output = [];

			for (var m of arr) {

				var obj = {};
				var tmp = null;

				if (m === '*') {
					obj.type = '*';
				} else if (m.indexOf('/') !== -1) {
					tmp = m.split('/');
					obj.type = 'every';
					for (let i = 0; i < tmp.length; i++) {
						if (tmp[i] !== '*')
							tmp[i] = +tmp[i];
					}
					obj.value = tmp;
				} else if (m.indexOf(',') !== -1) {
					tmp = m.split(',');
					obj.type = 'in';
					for (let i = 0; i < tmp.length; i++)
						tmp[i] = +tmp[i];
					obj.value = tmp;
				} else if (m.indexOf('-') !== -1) {
					tmp = m.split('-');
					obj.type = 'between';
					for (let i = 0; i < tmp.length; i++)
						tmp[i] = +tmp[i];
					obj.value = tmp;
				} else {
					obj.type = 'equal';
					obj.value = +m;
				}

				output.push(obj);
			}

			return function(date) {
				return func.cronexec(output, date);
			};
		};

		instance.configure = function() {
			timers = [];
			for (var m of config.timers)
				timers.push(func.cronmake(m));
		};

		var send = function() {

			var val;

			switch (config.type) {
				case 'now':
					val = new Date();
					break;
				case 'number':
					val = config.random ? U.random() : config.data.parseFloat();
					break;
				case 'buffer':
					try {
						val = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');
					} catch (e) {
						instance.throw(e);
					}
					break;
				case 'date':
					val = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();
					break;
				case 'object':
					try {
						val = config.random ? {} : (SharedMemory.createFunction('variables','return (' + config.data+');'))({...instance.main.variables2,...instance.main.variables,});
					} catch (e) {
						instance.throw(e);
					}
					break;
				case 'boolean':
					val = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';
					break;
				default:
					val = config.random ? U.random_string(20) : config.data;
					break;
			}

			instance.newmessage(val).send('output');
		};

		instance.trigger = function() {
			send();
		};

		instance.service = function() {
			var dt = config.offset ? new Date(NOW.getTime() - (config.offset * 60 * 1000)) : NOW;
			for (var m of timers) {
				if (m(dt)) {
					send();
					break;
				}
			}
		};

		instance.configure();
		config.restart && setInterval(send, 5000);

	};

</script>

<readme>
The component can make a trigger in the specific time and date.

## Cron string: `* * * * *`

Meaning of each `*` explained bellow, in order from left to right:

- minute `0 - 59`
- hour `0 - 23`
- day of month `1 - 31`
- month `1 - 12`
- day of week `0 - 6` and `0` is Sunday

```
0 16 * * *      -> trigger every day at 16:00
20 19 * * *     -> every day at 19:20 and 19:40
* * * * *       -> trigger every minute
0 20 * * 1      -> every monday at 20:00
```
</readme>

<style>
	.CLASS .padding { padding: 0 10px 10px; }
	.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }
	.CLASS button:hover { background-color: #F8F8F8; }
	.CLASS button:active { background-color: #E0E0E0; }
	.CLASS footer { padding: 10px; font-size: 12px; }
	.CLASS-settings input { font-family: Menlo, Consolas, monospace; }
	.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }
	.ui-dark .CLASS button:hover { background-color: #303030; }
	.ui-dark .CLASS button:active { background-color: #404040; }
</style>

<settings>
	<div class="padding CLASS-settings">

		<ui-component name="textboxlist" path="?.timers" config="maxlength:50;required:1;placeholder:* 1 * * *" class="m">Timers</ui-component>

		<div class="help monospace">
			<div>* * * * *</div>
			<div>1MINUTE 2HOUR 3DAY 4MONTH 5DAYOFWEEK</div>
		</div>

		<div class="help"><a href="https://crontab.guru/examples.html" target="_blank" class="link"><i class="ti ti-flask mr5"></i>Examples</a></div>

		<hr />
		<ui-component name="input" path="?.restart" config="type:checkbox">Trigger 5s after initialization.</ui-component>
		<hr />

		<div class="grid-4">
			<div>
				<ui-component name="input" path="?.offset" config="type:number" default="NOW.getTimezoneOffset()">Time zone offset</ui-component>
			</div>
		</div>
		<div class="help m">Must be defined in minutes. The backend time is in UTC format.<br />Your current time zone offset is: <ui-bind path="NOW" config="text:value.getTimezoneOffset()" class="b"></ui-bind> minutes</div>

		<div class="caption m">
			<label><i class="ti ti-comment"></i>Data sending</label>
		</div>

		<ui-component name="input" path="?.type" config="dirsource:string|String,number|Number,boolean|Boolean,now|Current date and time,date|Date,object|Object,buffer|Buffer as Base64;required:1">Type</ui-component>
		<div class="help">Choose an output type</div>

		<ui-bind path="?.type" config="show:value!=='now'" class="block">
			<div class="mt10 m">
				<ui-component name="input" path="?.random" config="type:checkbox">Random data</ui-component>
			</div>
			<ui-bind path="?.random" config="hide" class="hidden block">
				<hr />
				<ui-component name="input" path="?.data" config="required:1;height:250;type:multiline;maxlength:100000;monospace:1">Data</ui-component>
			</ui-bind>
		</ui-bind>

	</div>
</settings>

<body>
	<header>
		<i class="ICON"></i>NAME
	</header>
	<div class="padding">
		<button class="exec" data-exec="FUNC.trigger">Run</button>
	</div>
	<footer>Count of timers: <ui-bind path="CONFIG.timers" config="text:value ? value.length : 0" class="b"></ui-bind></footer>
</body>