<script component>
    const phoneUtil = require('google-libphonenumber').PhoneNumberUtil.getInstance();
    const path = require('path');
    var isElectron = (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron);
    var databasesPath = path.join(process.env.KERI_FLOW_USER_DATA_DIR ? process.env.KERI_FLOW_USER_DATA_DIR : PATH.root(), 'databases');

	exports.private = 'napessa';
	exports.name = 'CinetPay Transfert';
	exports.group = 'Payments';
	exports.version = '4';
	exports.icon = 'ti ti-coins-euro';
	exports.author = 'Badinga Ulrich';
	exports.config = {
        "isElectron" : (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron),
        "lang" : "en",
        "inProgress": "Transaction processing, please wait...",
        "type": "Payment",
        "currency": "FCFA",
        "apiLink" : "https://client.cinetpay.com/v1/",
        "apiKey" : "",
        "password" : "",
        "timeout": 10000,
        'phone': '',
        'amount': '',
        'url': "/"+Date.now().toString(36)+Math.random().toString(36).split(".")[1]
    };
	exports.inputs = [{ id: 'input', name: '<i class="ti ti-envelope"></i> Message' }];
	exports.outputs = [
        { id: 'success', name: '<span style="display: block;text-align: right;color: #2196F3;">Success <i class="ti ti-check-circle"></i> </span>' }, 
        { id: 'fail', name: '<span style="display: block;text-align: right;color: #F44336;">Error <i class="ti ti-exclamation-circle"></i></span>' },
    ];
    exports.meta = { remove : false, readonly: true };

    const SharedMemory = REQUIRE('definitions/shared.js');//_main.exports;

    var database = NOSQL(`~/${databasesPath}/cinetpay_transfert`);
    var token, tokenTTL;
    var templateGet =  Tangular.compile(Buffer.from([
  "3c68746d6c3e0a3c6865616465723e0a20203c7469746c653e43696e6574506179205472616e7366",
  "6572743c2f7469746c653e0a20203c7374796c653e0a2020202040696d706f727420276874747073",
  "3a2f2f666f6e74732e676f6f676c65617069732e636f6d2f6373733f66616d696c793d496e636f6e",
  "736f6c617461273b0a0a2020202068746d6c207b0a2020202020206d696e2d6865696768743a2031",
  "3030253b0a202020207d0a0a20202020626f6479207b0a202020202020626f782d73697a696e673a",
  "20626f726465722d626f783b0a2020202020206865696768743a20313030253b0a20202020202062",
  "61636b67726f756e642d636f6c6f723a20233030303030303b0a2020202020206261636b67726f75",
  "6e642d696d6167653a2072616469616c2d6772616469656e7428233131353831452c202330343136",
  "3037292c200a75726c282268747470733a2f2f6d656469612e67697068792e636f6d2f6d65646961",
  "2f6f454939754259537a4c70424b2f67697068792e67696622293b0a2020202020206261636b6772",
  "6f756e642d7265706561743a206e6f2d7265706561743b0a2020202020206261636b67726f756e64",
  "2d73697a653a20636f7665723b0a202020202020666f6e742d66616d696c793a2022496e636f6e73",
  "6f6c617461222c2048656c7665746963612c2073616e732d73657269663b0a202020202020666f6e",
  "742d73697a653a20312e3572656d3b0a202020202020636f6c6f723a2072676261283132382c2032",
  "35352c203132382c20302e38293b0a202020202020746578742d736861646f773a20302030203165",
  "7820233333666633332c20302030203270782072676261283235352c203235352c203235352c2030",
  "2e38293b0a202020207d0a0a202020202e6e6f697365207b0a202020202020706f696e7465722d65",
  "76656e74733a206e6f6e653b0a202020202020706f736974696f6e3a206162736f6c7574653b0a20",
  "202020202077696474683a20313030253b0a2020202020206865696768743a20313030253b0a2020",
  "202020206261636b67726f756e642d696d6167653a200a75726c282268747470733a2f2f6d656469",
  "612e67697068792e636f6d2f6d656469612f6f454939754259537a4c70424b2f67697068792e6769",
  "6622293b0a2020202020206261636b67726f756e642d7265706561743a206e6f2d7265706561743b",
  "0a2020202020206261636b67726f756e642d73697a653a20636f7665723b0a2020202020207a2d69",
  "6e6465783a202d313b0a2020202020206f7061636974793a20302e30323b0a202020207d0a0a2020",
  "20202e6f7665726c6179207b0a202020202020706f696e7465722d6576656e74733a206e6f6e653b",
  "0a202020202020706f736974696f6e3a206162736f6c7574653b0a20202020202077696474683a20",
  "313030253b0a2020202020206865696768743a20313030253b0a2020202020206261636b67726f75",
  "6e643a20726570656174696e672d6c696e6561722d6772616469656e74283138306465672c207267",
  "626128302c20302c20302c20302920302c200a7267626128302c20302c20302c20302e3329203530",
  "252c207267626128302c20302c20302c2030292031303025293b0a2020202020206261636b67726f",
  "756e642d73697a653a206175746f203470783b0a2020202020207a2d696e6465783a20313b0a2020",
  "20207d0a0a202020202e6f7665726c61793a3a6265666f7265207b0a202020202020636f6e74656e",
  "743a2022223b0a202020202020706f696e7465722d6576656e74733a206e6f6e653b0a2020202020",
  "20706f736974696f6e3a206162736f6c7574653b0a202020202020646973706c61793a20626c6f63",
  "6b3b0a202020202020746f703a20303b0a2020202020206c6566743a20303b0a2020202020207269",
  "6768743a20303b0a202020202020626f74746f6d3a20303b0a20202020202077696474683a203130",
  "30253b0a2020202020206865696768743a20313030253b0a2020202020206261636b67726f756e64",
  "2d696d6167653a206c696e6561722d6772616469656e7428306465672c207472616e73706172656e",
  "742030252c20726762612833322c200a3132382c2033322c20302e32292032252c20726762612833",
  "322c203132382c2033322c20302e38292033252c20726762612833322c203132382c2033322c2030",
  "2e32292033252c200a7472616e73706172656e742031303025293b0a2020202020206261636b6772",
  "6f756e642d7265706561743a206e6f2d7265706561743b0a2020202020202d7765626b69742d616e",
  "696d6174696f6e3a207363616e20372e3573206c696e65617220307320696e66696e6974653b0a20",
  "2020202020616e696d6174696f6e3a207363616e20372e3573206c696e65617220307320696e6669",
  "6e6974653b0a202020207d0a0a20202020402d7765626b69742d6b65796672616d6573207363616e",
  "207b0a2020202020203025207b0a20202020202020206261636b67726f756e642d706f736974696f",
  "6e3a2030202d31303076683b0a2020202020207d0a0a2020202020203335252c0a20202020202031",
  "303025207b0a20202020202020206261636b67726f756e642d706f736974696f6e3a203020313030",
  "76683b0a2020202020207d0a202020207d0a0a20202020406b65796672616d6573207363616e207b",
  "0a2020202020203025207b0a20202020202020206261636b67726f756e642d706f736974696f6e3a",
  "2030202d31303076683b0a2020202020207d0a0a2020202020203335252c0a202020202020313030",
  "25207b0a20202020202020206261636b67726f756e642d706f736974696f6e3a2030203130307668",
  "3b0a2020202020207d0a202020207d0a0a202020202e7465726d696e616c207b0a20202020202062",
  "6f782d73697a696e673a20696e68657269743b0a202020202020706f736974696f6e3a206162736f",
  "6c7574653b0a2020202020206865696768743a20313030253b0a20202020202077696474683a2031",
  "30303070783b0a2020202020206d61782d77696474683a20313030253b0a20202020202070616464",
  "696e673a203472656d3b0a202020202020746578742d7472616e73666f726d3a2075707065726361",
  "73653b0a202020207d0a0a202020202e6f7574707574207b0a202020202020636f6c6f723a207267",
  "6261283132382c203235352c203132382c20302e38293b0a202020202020746578742d736861646f",
  "773a203020302031707820726762612835312c203235352c2035312c20302e34292c203020302032",
  "70782072676261283235352c203235352c200a3235352c20302e38293b0a202020207d0a0a202020",
  "202e6f75747075743a3a6265666f7265207b0a202020202020636f6e74656e743a2022203e20223b",
  "0a202020207d0a0a202020202e6f75747075742e6e6f3a3a6265666f7265207b0a20202020202063",
  "6f6e74656e743a2022223b0a202020207d0a0a202020202f2a0a2e696e707574207b0a2020636f6c",
  "6f723a2072676261283139322c203235352c203139322c20302e38293b0a2020746578742d736861",
  "646f773a0a2020202020203020302031707820726762612835312c203235352c2035312c20302e34",
  "292c0a202020202020302030203270782072676261283235352c203235352c203235352c20302e38",
  "293b0a7d0a0a2e696e7075743a3a6265666f7265207b0a2020636f6e74656e743a20222420223b0a",
  "7d0a2a2f0a2020202061207b0a202020202020636f6c6f723a20236666663b0a2020202020207465",
  "78742d6465636f726174696f6e3a206e6f6e653b0a202020207d0a0a20202020613a3a6265666f72",
  "65207b0a202020202020636f6e74656e743a20225b223b0a202020207d0a0a20202020613a3a6166",
  "746572207b0a202020202020636f6e74656e743a20225d223b0a202020207d0a0a20202020687220",
  "7b0a2020202020206d617267696e3a20303b0a202020202020636c6561723a20616c6c3b0a202020",
  "202020646973706c61793a20626c6f636b3b0a20202020202077696474683a2033353070783b0a20",
  "2020202020626f726465722d636f6c6f723a2072676261283132382c203235352c203132382c2030",
  "2e38293b0a202020207d0a0a202020202e6572726f72636f6465207b0a202020202020636f6c6f72",
  "3a2077686974653b0a202020207d0a20203c2f7374796c653e0a3c2f6865616465723e0a0a3c626f",
  "64793e0a20203c64697620636c6173733d226e6f697365223e3c2f6469763e0a20203c6469762063",
  "6c6173733d226f7665726c6179223e3c2f6469763e0a20203c64697620636c6173733d227465726d",
  "696e616c223e0a202020203c68313e4d79506179676120536572766963653c2f68313e0a20202020",
  "3c7461626c65207374796c653d2277696474683a20313030253b223e0a20202020202020207b7b20",
  "666f7265616368206974656d20696e206974656d73207d7d0a2020202020202020202020203c7472",
  "20636c6173733d226f7574707574223e0a202020202020202020202020202020203c74643e7b7b69",
  "74656d2e636c69656e745f70686f6e657d7d3c2f74643e0a20202020202020202020202020202020",
  "3c74643e7b7b206974656d2e616d6f756e74207d7d3c2f74643e0a20202020202020202020202020",
  "2020203c74643e7b7b206974656d2e74696d65207d7d3c2f74643e0a202020202020202020202020",
  "202020203c74643e7b7b206974656d2e737461747573207d7d3c2f74643e0a202020202020202020",
  "2020203c2f74723e0a20202020202020207b7b20656e64207d7d0a202020203c2f7461626c653e0a",
  "202020203c212d2d203c68723e202d2d3e0a20203c2f6469763e0a3c2f626f64793e0a0a3c2f6874",
  "6d6c3e0a"
].join(""),'hex').toString('utf8'))
    setInterval(function () {
        database.remove()
            .where("time",">",0)
            .where("time","<",Date.now())
            .callback((err,docs, meta)=>{
                database.remove()
                    .where("create","<",Date.now() - 2*36e5)
                    .callback((err,docs, meta)=>{
                        database.clean();
                    });
            });
    }, 60e3);

    var getValueFromPath = function(path,data) {
        path = (Array.isArray(path) ? path : path.toString().split('.'))
            .filter(x=>typeof x == "string" && x);
        // if(path.length == 0 || typeof data != 'object') return data;
        var obj = data;
        for (var m of path) {
            obj = obj[m];
            if (typeof obj != "object" && obj === undefined)
                return null;
        }
        return obj;
    };
    var setValueFromPath = function(path,data,value) {
        path = (Array.isArray(path) ? path : path.toString().split('.')).filter(x=>typeof x == "string" && x);
        if(path.length == 0 || typeof data != 'object') return value;
        var obj = data;
        for (var m of path.slice(0,path.length-1)) {
            if (typeof obj[m] != "object"){
                obj[m] = {};
            }
            obj = obj[m]
        }
        obj[path.pop()] = value;
        return data;
    };
    function sendRequest(opt){
        var oldCallback;
        if(opt.callback && typeof opt.callback == "function"){
            oldCallback = opt.callback
        }
        return new Promise(( ok,err)=>{
            opt.callback = async function(e, r) {
                if(oldCallback){
                    await oldCallback(e,r);
                }
                if(r && r.body && typeof r.body == "string" && r.body.isJSON()){
                    r.body = r.body.parseJSON(true);
                }
                e ? err(e) : ok(r.body);
            };
            REQUEST(opt);
        })
    }
	exports.make = function(instance, config) {
        // console.log("PREF", PREF, PREF.mayaHost);
        var templates = {
            phone : ()=>"",
            amount : ()=>"",
        }
		var prev = [];
		var cache = [];
        var rootUrl = "";
        try {
            rootUrl = this.main.metadata.origin+(`/${this.main.metadata.rootUrl}/${this.main.metadata.proxypath}/${config.url}`).replace(/\/+/g,"/");
        } catch (error) {}

        var endpoints = {
            account : {
                login : async ()=>{
                    clearTimeout(tokenTTL);
                    var res = await sendRequest({
                        url : config.apiLink+"/auth/login?lang="+config.lang,
                        method : "POST",
                        type : "urlencoded",
                        headers : {
                            "Content-type":	"application/x-www-form-urlencoded"
                        },
                        body : `apikey=${encodeURIComponent(config.apiKey)}&password=${encodeURIComponent(config.password)}`
                    });
                    // console.log("CINETPAY LOGIN", res);
                    if(typeof res == "object" && res.code == 0 && res?.data?.token){
                        token = res.data.token;
                        tokenTTL = setTimeout(()=>{
                            token = null
                        }, 5e3)
                    }else{
                        token = null;
                    }
                    return token;
                },
                balance : async ()=>{
                    var get = async ()=>sendRequest({
                        url : `${config.apiLink}/transfer/check/balance?lang=${config.lang}&token=${encodeURIComponent(token ?? await endpoints.account.login())}`,
                        method : "GET"
                    });
                    var ret = await get();
                    if(typeof res == "object" && res.code == 706){
                        await endpoints.account.login();
                        ret = await get();
                    }
                    return ret;
                },
            },
            contact : {
                add : async (contacts)=>{
                    var get = async ()=>sendRequest({
                        url : `${config.apiLink}/transfer/contact?lang=${config.lang}&token=${encodeURIComponent(token ?? await endpoints.account.login())}`,
                        method : "POST",
                        type : "urlencoded",
                        body : `data=${encodeURIComponent(JSON.stringify(Array.isArray(contacts) ? contacts : [contacts]))}`,
                    });
                    var ret = await get();
                    if(typeof res == "object" && res.code == 706){
                        await endpoints.account.login();
                        ret = await get();
                    }
                    return ret;
                },
            },
            transfert : {
                send : async (amount, contacts, payment_method)=>{
                    var rootUrl = "";
                    try {
                        rootUrl = this.main.metadata.origin+(`/${this.main.metadata.rootUrl}/${this.main.metadata.proxypath}/${config.url}`).replace(/\/+/g,"/");
                    } catch (error) {}
                    // console.log("SEND CONTACTS", contacts);

                    contacts = JSON.stringify((Array.isArray(contacts) ? contacts : [contacts]).map(contact=>{
                            var id = Date.now().toString(36)+Math.random().toString(36).split(".")[1];
                            return {
                                "prefix": contact["prefix"],
                                "country": contact["country"],
                                "phone": contact["phone"],
                                "amount": Math.floor(amount),
                                "client_transaction_id": id,
                                "notify_url": (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) ?
                                    "https://wha.loo.re/request/store"+`/${id}?type=callback`.replace(/\/+/g,"/") :
                                    rootUrl+`/${id}/callback`.replace(/\/+/g,"/"),
                                ...(payment_method ? {"payment_method": payment_method} : {})
                            };
                        }), null,2);
                    // console.log("FORMATED CONTACTS", contacts);
                    var get = async ()=>sendRequest({
                        url : `${config.apiLink}/transfer/money/send/contact?lang=${config.lang}&token=${encodeURIComponent(token ?? await endpoints.account.login())}`,
                        method : "POST",
                        type : "urlencoded",
                        body : `data=${encodeURIComponent(contacts)}`,
                    });
                    var ret = await get();
                    if(typeof res == "object" && res.code == 706){
                        await endpoints.account.login();
                        ret = await get();
                    }
                    return ret;
                },
                check : async (id,type)=>{
                    var get = async ()=>sendRequest({
                        url : `${config.apiLink}/transfer/check/money?lang=${config.lang}&token=${encodeURIComponent(token ?? await endpoints.account.login())}&${encodeURIComponent(type ?? "transaction_id")}=${encodeURIComponent(id)}`,
                        method : "GET"
                    });
                    var ret = await get();
                    if(typeof res == "object" && res.code == 706){
                        await endpoints.account.login();
                        ret = await get();
                    }
                    return ret;
                },
            }
        };
    
        
        function setStatus(body, unique_id, success) {
            database.one().where('unique_id', unique_id).callback(function(err, doc, meta) {
                // console.log("5.CINET PAY", err,doc, meta);
                if(err){
                    if(cache[unique_id]){
                        cache[unique_id]({message : "Transaction not found"});
                        delete cache[unique_id];
                    }
                    success(false,"Transaction not found");
                    return;
                }
                database.modify({
                    ...doc,
                    body,
                    time : Date.now() + 36e5*2,
                    status : body.order_status == "200" ? "OK" : "ERROR"
                }).where('unique_id', unique_id).callback(function(err, doc, meta) {
                    // console.log(err, doc, meta);
                    if(cache[unique_id]){
                        cache[unique_id](body.order_status != "200" ? body : undefined, body.order_status == "200" ? body : undefined);
                        delete cache[unique_id];
                        success(true);
                    } else {
                        success(false,"Transaction not found");
                    }
                });
            });
        }
		instance.trigger = function() {
			instance.message(instance.newmessage({}));
		};
        instance.configure = function() {
            if(config.phone){
                templates.phone = Tangular.compile(config.phone);
            }else{
                templates.phone = ()=>"";
            }
            if(config.amount){
                templates.amount = Tangular.compile(config.amount);
            }else{
                templates.amount = ()=>"";
            }
            config.isElectron = (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron);
            if (prev.length) {
                prev.map(route=>route.remove());
				prev = [];
                instance.status({online : false});
			}
			if (config.url) {
                config.url = ("/"+config.url).replace(/\/+/g,"/");
                rootUrl = this.main.metadata.origin+(`/${this.main.metadata.rootUrl}/${this.main.metadata.proxypath}/${config.url}`).replace(/\/+/g,"/");
                var flags = [config.timeout];
				prev = {};
				// console.log("WHATSAPP HTTP REGISTER",[config.url, 'POST ' + config.url+'/{unique_id}/{operation}']);
				prev.get = [
                    ROUTE('GET ' + config.url, function() {
                        var ctrl = this;
                        var connections = Object.keys(instance.connections);
                        database.find().callback(function(err, response, meta) {
                            // console.log(response);
                            ctrl.html(templateGet({
                                items : err ? [] : response,
                            }));
                        });
                    }),

                    ROUTE('GET ' + config.url+'.json', function($) {
                        // console.log($.res?.json,$.res?.json,this?.json, this?.res?.json);
                        var connections = Object.keys(instance.connections);
                        database.find().paginate($.query?.page ?? 0, $.query?.limit ?? 10).callback(function(err, response, meta) {
                            $.res.json({
                                err, response, meta
                            });
                        })
                    }),

                    ROUTE('POST ' + config.url+'/{unique_id}/{operation}', function() {
                        var self = this;
                        body = self.body;
                        // console.log(body, self.params);
                        body = body && typeof body == "string" && body.isJSON() ? body.parseJSON(true) : body;
                        // console.log(self.params.unique_id, Object.keys(cache),cache[self.params.unique_id]);
                        setStatus(body,self.params.unique_id, self.success)
                    })
                ];
            }
        }
		instance.message = async function($) {
            var session = new SharedMemory($);
            await session.ready;
            if(!(session.sessionId && session.reply && typeof session.reply == "function")){
                return instance.throw("Invalid message");
            }
            if( 
                !config.apiLink || 
                !config.apiKey || 
                !config.phone || 
                !config.amount || 
                !config.password
            ) return instance.throw("Component not configured");
            ;

            var unique_id = Date.now().toString(36)+Math.random().toString(36).split(".")[1];
            var num = $.variables(templates.phone({
                        data : session.data ?? {},
                        session : session,
                        variables : {...instance.main.variables2,...instance.main.variables,}
                    }), true).replace(/[^\d]/, "");
            cache[unique_id] = (function(unique_id,err, success){
                // console.log("CINETPAY CACHE", unique_id,err, success);
                var send = async (doc)=>{
                    await session.setItem("input",null);  // clear answer handler
                    session.data.payment = doc; 
                    $.send(err ? 'fail' : 'success', session.data);
                }
                database.one().where('unique_id', unique_id).callback(function(err, doc, meta) {
                    if(err){
                        return send(null);
                    }
                    doc = {
                        ...doc,
                        time : Date.now() + 36e5*2,
                        status : !err ? "OK" : "ERROR"
                    };
                    database.modify(doc).where('unique_id', unique_id).callback(function(err, doc, meta) {
                        return send(doc);
                    });
                })
            }).bind($, unique_id);
            await session.setItem("input", async function (response) {
                try{
                    session.reply(config.inProgress,true);
                }catch(e){
                    throw e;
                }
            });
            let number;
            try {
                number = phoneUtil.parseAndKeepRawInput(num, 'CI');
            } catch (error) {}
            // console.log("CINETPAY NUMBER", num, number);
            var body = {
                "prefix": number?.getCountryCode().toString(),
                "country": number?.getCountryCode().toString(),
                "phone": ((["CI"].indexOf(phoneUtil.getRegionCodeForNumber(number)) != -1) ? "0" : "") + number?.getNationalNumber().toString(),
                "name": `Client ${number ? phoneUtil.getRegionCodeForNumber(number): ""} ${number?.getNationalNumber()}`.trim(),
                "surname": `${number ? phoneUtil.getRegionCodeForNumber(number): ""} ${number?.getNationalNumber()}`.trim(),
                "email": `${number ? phoneUtil.getRegionCodeForNumber(number): ""}${number?.getNationalNumber()}@client.tel`.trim()
            };
            // console.log("1.CINET PAY", body)
            database.insert(body, true).where('unique_id', unique_id).callback(async function(err,doc, meta){
                if(!number){
                    return setStatus({
                        message : 'Invalid contact',
                        order_status : 0
                    },unique_id, ()=>{});
                }
                var res = await endpoints.contact.add(body);
            // console.log("2.CINET PAY", res, body);
            if(res.code == 0){
                res = await endpoints.transfert.send($.variables(templates.amount({
                        data : session.data ?? {},
                        session : session,
                        variables : {...instance.main.variables2,...instance.main.variables,}
                    }), true),res.data[0]); 
                // console.log("3.CINET PAY", res);
                if(res.code == 0){
                    res = await endpoints.transfert.send($.variables(templates.amount({
                        data : session.data ?? {},
                        session : session,
                        variables : {...instance.main.variables2,...instance.main.variables,}
                    }), true),res.data); 
                    // console.log("4.CINET PAY", res);
                    return setStatus(res);
                }else{
                    if(res.description || res.message){
                        instance.throw(res.description || res.message)
                    }
                    return setStatus({
                        message : res.description || res.message || 'Invalid contact',
                        order_status : 0
                    },unique_id, ()=>{});
                }
            }else{
                if(res.description || res.message){
                    instance.throw(res.description || res.message)
                }
                return setStatus({
                    message : res.description || res.message || 'Invalid contact',
                    order_status : 0
                },unique_id, ()=>{});
            }
            });
            session.reply(config.inProgress,true);
		};
        instance.configure();
	};

</script>

<style>
	.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }
	.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }
</style>

<readme>
The component allow your send payments to more than 300 million mobile, bank and card account holders across Africa.

</readme>

<body>
	<header>
		<i class="ICON"></i>NAME
	</header>
	<footer class="hidden">
		<ui-bind path="CONFIG.url" config="show" class="hidden block" style="
			flex:1;
			text-align: right;
		">
			<a is="is-a" path="CONFIG.url" config="text;href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)" target="_blank"></a>
		</ui-bind>
	</footer>
</body>

<settings>
    <div class="padding  bg-smoke npb">
        <div class="message message-alert">Phone Number and Amount support dynamic variables. <br>Variables are read from global Variables <code class="b">{key}</code> and from the message data <code class="b">{data.key}</code></div>
		<div class="row">
			<div class="col-md-6 m">
				<ui-component name="input" path="?.phone" config="type:text;required:1">Phone Number</ui-component>
                <div class="help">Currently, we only accept the Gabonese Airtel Money numbers.</div>
			</div>
			<div class="col-md-6 m">
				<ui-component name="input" path="?.amount" config="default:100;type:text;required:1">Amount</ui-component>
                <div class="help">Minimum Amount is 100 cfa, Maximum Amount is 400.000 cfa</div>
			</div>
		</div>
	</div>
	<div class="padding">
		<div class="row">
            <div class="col-md-3 m">
				<ui-component name="input" path="?.lang" config="dirsource:en|English,fr|Francais;required:1">Environement</ui-component>
			</div>
            <div class="col-md-9 m">
                <ui-component name="input" path="?.apiLink" config="placeholder:@(API Base Link);monospace:1">API Link</ui-component>
                <div class="help"><a href="https://docs.cinetpay.com/api/1.0-fr/transfert/utilisation" target="_blank">CinetPay Documentation</a>.</div>
			</div>
            <div class="col-md-6 m">
                <ui-component name="input" path="?.apiKey" config="placeholder:@(API KEY);monospace:1">API KEY</ui-component>
			</div>
			<div class="col-md-6 m">
                <ui-component name="input" path="?.password" config="placeholder:@(Mot de passe API);type:password">Password</ui-component>
			</div>
            <div class="col-md-12 m">
                <ui-component name="textarea" path="?.inProgress" config="placeholder:@(Payment in progress message);monospace:1">Payment in progress notification</ui-component>
            </div>
            <div class="col-md-12 m">
                <ui-component name="input" path="?.timeout" config="type:number">Request Timeout</ui-component>
                <div class="help"><i class="ti ti-clock"></i><ui-bind path="?.timeout" config="text:((value||0)/1000).floor(2)+' sec.'"></ui-bind> Timeout <b>in milliseconds</b></div>
            </div>
		</div>
	</div>
</settings>
<script>
    var isElectron = window.isElectron;
</script>