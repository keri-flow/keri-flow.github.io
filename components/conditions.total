<script component>

	exports.name = 'Conditions';
	exports.icon = 'ti ti-code-branch';
	exports.group = 'Flow';
	exports.author = 'Total.js';
	exports.version = '5';
	exports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };
	exports.inputs = [{ id: 'input', name: 'Input' }];
	exports.outputs = [{ id: 'output1', name: 'Output #1' }];
	exports.meta = {readonly: true, remove: false};
	const SharedMemory = REQUIRE('definitions/shared.js');
	exports.make = function(instance, config) {

		var check, getValue1;
		var COND = [];

		const get = (obj, path) => path.split(".").reduce((r, k) => r?.[k], obj);

		var getValue2 = (path, type, data, session) => {

			var source;
			switch (type) {
				case 'data':
					source = data;
					break;
				case 'session':
					source = session;
					break;
				case 'variables':
					source = {...instance.main.variables2,...instance.main.variables};
					break;
					break;
			}

			if (!path)
				return source;

			if (typeof source === 'object' && !Array.isArray(source) && source != null)
				return get(source, path);
		};

		instance.message = async function($) {
			var session = new SharedMemory($);
      await session.ready;
      if(!(session.sessionId && session.reply && typeof session.reply == "function")){
          return instance.throw("Invalid message");
      }
			

			var data = getValue1(session.data, session, {...instance.main.variables2, ...instance.main.variables}, get);

			var sent = false;
			for (let i = 0; i < COND.length; i++) {
				try {
					let ok = COND[i](data, session.data, session);
					if (ok) {
						instance.send('output' + (i + 1), session.data);
						sent = true;
					}
				} catch(e) {
					console.error('muj error', e);
				}
			}
			!sent && instance.destroy && typeof instance.destroy == "function" && instance.destroy();
		};

		instance.configure = function() {

			if (!config.source || !config.conditions.length)
				return;

			const conditions = config.conditions;
			COND = [];

			conditions.forEach(function eachCondition(cond, index){
				const { operator, value, type } = cond;

				switch (operator) {
					case 'isnull':
						COND[index] = (v) => v === null || v === undefined;
						return;
					case 'isnotnull':
						COND[index] = (v) => v !== null && v !== undefined;
						return;
					case 'true':
					case 'false':
						COND[index] = (v) => v === operator.parseBoolean();
						return;
					case 'isempty':
						COND[index] = (v) => (
							typeof(v) == 'string' && v == '' 
						) || (
							typeof v === 'object' && !Array.isArray(source) && Object.keys(v).length == 0 
						) || (
							typeof v === 'object' && Array.isArray(source) && v.length == 0 
						);
						return;
					case 'isnotempty':
						COND[index] = (v) => !((
							typeof(v) == 'string' && v == '' 
						) || (
							typeof v === 'object' && !Array.isArray(source) && Object.keys(v).length == 0 
						) || (
							typeof v === 'object' && Array.isArray(source) && v.length == 0 
						));
						return;
					case 'haskey':
						COND[index] = (v) => {
							if (typeof v !== 'object' || Array.isArray(v) || v == null)
								return;
							return v.hasOwnProperty(val);
						};
						return;
					case 'hasnotkey':
						COND[index] = (v) => {
							if (typeof v !== 'object' || Array.isArray(v) || v == null)
								return true;
							return !v.hasOwnProperty(val);
						};
						return;
					case 'includes':
						if (type === 'number')
							value = +value;
						COND[index] = (v) => {
							if (!(v instanceof Array))
								return false;
							return v => v.includes(value);
						};
						return;
					case 'notincludes':
						if (type === 'number')
							value = +value;
						COND[index] = (v) => {
							if (!(v instanceof Array))
								return true;
							return v => !v.includes(value);
						};
						return;
					case 'expression':
						var fn = SharedMemory.createFunction('data', 'session', 'variables', value.indexOf('return') > -1 ? value : 'return ' + value + ';');
						COND[index] = (v, data, session) => {
							try {
								var result = fn(data, session, {...instance.main.variables2, ...instance.main.variables});
								return result;
							} catch(e) {
								console.log('invalid expresion', fn.toString());
							}
						};
						return;
					case 'in':
						COND[index] = (v) => {
							if (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))
								return false;
							return v.indexOf(value) > -1;
						};
						return;
					case 'notin':
						COND[index] = (v) => {
							if (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))
								return true;
							return v.indexOf(value) === -1;
						};
						return;
				}

				switch (type) {
					case 'number':
					case 'string':
						COND[index] = compile[type](operator, value);
						break;
					case 'data':
					case 'session':
					case 'variables':
					case 'expression':
						var fn, fnEx;
						if (operator === 'between' || operator === 'notbetween') {
							fn = (data, val) => {
								const [ v1, v2 ] = val.split(',').trim();
								if (!v1 || isNaN(v1) || !v2 || isNaN(v2))
									return false;
								return ops[operator](+v1, data, +v2);
							};
						} else if (ops.list.includes(operator)) {
							fn = ops[operator];
						} else {
							fn = NOOP;
							console.log('Invalid operator', operator);
						}

						if (type === 'expression')
							fnEx = SharedMemory.createFunction('data', 'session', 'variables', value.indexOf('return') > -1 ? value : 'return ' + value + ';');

						COND[index] = (val1, data, session) => {
							var val2;
							if (type === 'expression') {
								try {
									val2 = fnEx(data, session, {...instance.main.variables2, ...instance.main.variables});
								} catch(e) {
									console.error('Invalid function or expresion', fn.toString());
									console.error(e);
									return false;
								}
							} else
								val2 = getValue2(value, type, data, session, fnEx);

							return fn(val1, val2);
						};
						break;
				}
			});

			instance.outputs = [];

			COND.forEach((fn, i) => {
				instance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });
				if (typeof fn !== 'function')
					instance.throw('Invalid settings for output: ' + (i + 1));
			});

			if (config.source === 'expression')
				getValue1 = SharedMemory.createFunction('data', 'session', 'variables', 'get', 'return ' + config.path + ';');
			else {
				try {
					var str = 'if ({2} && (typeof {0} !== \'object\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \'{1}\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');
					getValue1 = SharedMemory.createFunction('data', 'session', 'variables', 'get', str);
				} catch(e) {
					instance.throw(e.stack);
					console.error(str);
				};
			}

			instance.save();
		};

		const ops = {};
		ops.gt = (v1, v2) => v1 > v2;
		ops.ge = (v1, v2) => v1 >= v2;
		ops.lt = (v1, v2) => v1 < v2;
		ops.le = (v1, v2) => v1 <= v2;
		ops.eq = (v1, v2) => v1 == v2;
		ops.seq = (v1, v2) => v1 === v2;
		ops.neq = (v1, v2) => v1 != v2;
		ops.sneq = (v1, v2) => v1 !== v2;
		ops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;
		ops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;
		ops.in = (v1, v2) => v1.indexOf(v2) > -1;
		ops.notin = (v1, v2) => v1.indexOf(v2) === -1;

		ops.list = Object.keys(ops);

		const compile = {
			number: (operator, val2) => {

				if (!ops.list.includes(operator))
					return;

				var fn;

				if (operator === 'between' || operator === 'notbetween') {
					fn = (data) => {
						const [ v1, v2 ] = val2.split(',').trim();
						if (!v1 || isNaN(v1) || !v2 || isNaN(v2))
							return false;
						return ops[operator](+v1, data, +v2);
					};
				} else {
					val2 = U.parseFloat(val2);
					if (isNaN(val2))
						return NOOP;
					fn = (val1) => ops[operator](val1, val2);
				}

				return function(val1) {
					if (typeof val1 !== 'number')
						return false;
					return fn(val1);
				};

			},
			string: (operator, val2) => {

				var fn;

				switch(operator) {
					case 'eq':
					case 'neq':
					case 'seq':
					case 'sneq':
					case 'in':
					case 'notin':
						fn = ops[operator];
						break;
					case 'startsWith':
					case 'endsWith':
						fn = val1 => val1[operator](val2);
						break;
					case 'regex':
						var match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));
						if (!match || !match.length || match.length < 2)
							return NOOP;
						else
							fn = val1 => new RegExp(match[1], match[2]).test(val1);
						break;
				}

				return function(val1) {
					if (typeof fn != "function" || typeof val1 !== 'string')
						return false;
					return fn(val1, val2);
				};
			}
		};

		instance.configure();
	};

</script>

<readme>
## Source and Path
Use the **Source** dropdown to select where to look for the value to use in the conditions check.
Set a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.
**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, session, variables
**Expressions example:**
```js
data.value - variables.offset
```

## Conditions
Each of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.

**Operator**
Not all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.
*index of* only works for data of type array or string.
**Expression operator**
In this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, session, variables.
Expressions operator example:
```js
data.value > variables.threshold;
```
or with a conditions
```js
if (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);
```

**Expression type**
The expression in the **value** field must return a value which will be used in the given operation. Available variables: data, session, variables.
Expressions example:
```js
data.value - variables.offset
```

**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`
</readme>

<settings>
	<div class="padding">
			<label class="ui-input-label">Source + Path to the value</label>
		<div class="switch-input-group wide m">
			<ui-component name="input" path="?.source" config="dirsource:REPO.switch_datasources" default="'data'"></ui-component>
			<ui-component name="input" path="?.path"></ui-component>
		</div>
		<section class="switch-conditions m">
			<label class="ui-input-label">Switch conditions</label>
			<div class="switch-thead">
				<div class="row">
					<div class="col-md-1">#</div>
					<div class="col-md-2">Operator</div>
					<div class="col-md-6">Type + Value</div>
					<div class="col-md-2">Output name</div>
					<div class="col-md-1">Action</div>
				</div>
			</div>
			<ui-bind path="?.conditions" config="template:.switch-condition -> data-index" clas="block">
				<ui-component name="movable" path="?.conditions" config="selector:.dragme;exec:FUNC.switch_condition_dragged">
					<script type="text/html">
						{{ foreach con in value }}
						<div class="switch-condition dragme" data-index="{{ $index }}" draggable="true">
							<div class="row">
								<div class="col-md-1">
									{{ ($index + 1) }}.
								</div>
								<div class="col-md-2">
									<ui-component name="input" path="?.conditions[{{ $index }}].operator" config="dirsource:REPO.switch_operators"></ui-component>
								</div>
								<div class="col-md-6">
									<ui-bind path="?.conditions[{{ $index }}].operator" config="hide:['true','false', 'isnull', 'isnotnull', 'isempty','isnotempty'].indexOf(value) > -1;.switch-input-group:value!=='expression'" class="block">
										<ui-bind path="?.conditions[{{ $index }}].operator" config="hide:value==='expression'">
											<ui-component name="input" path="?.conditions[{{ $index }}].type" config="dirsource:REPO.switch_valuetypes"></ui-component>
										</ui-bind>
										<ui-component name="input" path="?.conditions[{{ $index }}].value" config="placeholder:value"></ui-component>
									</ui-bind>
								</div>
								<div class="col-md-2">
									<ui-component name="input" path="?.conditions[{{ $index }}].name"></ui-component>
								</div>
								<div class="col-md-1">
									<i class="ti ti-trash red exec" data-exec="FUNC.switch_remove_condition"></i>
								</div>
							</div>
						</div>
						{{ end }}
					</script>
				</ui-component>
			</ui-bind>
			<div class="help m">Each condition corresponds to an output index. First condition --> First output, etc.</div>
			<button class="button-add exec" data-exec="FUNC.switch_add_condition">ADD</button>
		</section>
		<button class="button exec" style="width: 200px;" data-exec="FUNC.switch_readme"><i class="ti ti-info-circle blue"></i>Show configuration info</button>
	</div>
</settings>

<script>

	FUNC.switch_readme = function() {
		EXEC('flow/readme', flow.info.selected.component);
	};

	FUNC.switch_add_condition = function(el) {
		var scope = el.scope();
		PUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });
	};

	FUNC.switch_remove_condition = function(el) {
		var path = el.scope().path;
		var config = GET(path);
		var index = el.closest('.switch-condition').attrd('index');
		config.conditions.splice(index, 1);
		SET(path, config);
		console.log(config);
	};

	FUNC.switch_condition_dragged = function(list, dragged, target) {
		dragged = $(dragged);
		var dragged_index = dragged.attrd('index');
		var target_index = $(target).attrd('index');
		var path = dragged.scope().path;
		var config = GET(path);
		var dragged_item = config.conditions.splice(dragged_index, 1)[0];
		config.conditions.splice(target_index, 0, dragged_item);
		SET(path, config);
	};

	FUNC.switch_tooltip = function(el) {
		var opt = {};
		opt.element = el;
		var id = el.attrd('id');
		opt.html = REPO.switch_tooltips[id];

		SETTER('tooltip', 'show', opt);
	};

	REPO.switch_datasources = 'data|Message data,session|Session data,variables|Local variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });
	REPO.switch_valuetypes = 'number|Number,string|String,data|Message data,session|Session data,variables|Local variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });
	REPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,neq|!=,sneq|!==,ge|>=,le|<=,between|Between,notbetween|not between,isnull|Is null,isnotnull|Is not null,isempty|Is empty,isnotempty|Is not empty,in|In,notin|Not in,startsWith|Starts with,endsWith|Ends with,regex|Regular expression,true|Is true,false|Is false,includes|Includes,notincludes|Not includes,haskey|Has key,hasnotkey|Has not key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });

</script>

<style>
	.CLASS footer { padding: 10px; font-size: 12px; }

	.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }
	.button-add:hover { background-color: #F8F8F8; }
	.button-add:active { background-color: #E0E0E0; }

	.ui-dark .button-add { border-color: #404040; color: #FFF; background-color: #202020; }
	.ui-dark .button-add:hover { background-color: #303030; }
	.ui-dark .button-add:active { background-color: #404040; }

	.switch-input-group { clear: both; height: 36px; }
	.switch-input-group > ui-component:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }
	.switch-input-group > ui-component:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }
	.switch-input-group.wide > ui-component:first-child .ui-input-control { width: 200px; }
	.switch-input-group.wide > ui-component:last-child .ui-input-control { width: calc(100% - 200px); }
	.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }
	.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }
	.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }
	.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }
	.switch-thead { padding: 8px; margin-bottom:4px; }

	.ui-dark .switch-conditions { border-color: #404040; }
	.ui-dark .switch-condition { border-color: #404040; }
	.ui-dark .switch-help { border-color: #404040; }

</style>

<body>
	<header>
		<i class="ICON"></i>NAME
	</header>
</body>