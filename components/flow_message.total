<script component>
    exports.name = 'Message';
    exports.group = 'Flow';
    exports.icon = 'ti ti-ti ti-envelope';
    exports.version = '1';
    exports.npm = [];
    exports.config = {
        message: "Message text" ,
        mediaUrl : "",
        privacy : "no",
        hasMedia : false,
        hasCode : false,
        sendTo : false,
        sendToContainer : "",
        to : "",
        code: `
// data {Object}
// params {Object}
// session {SessionObject}
// variables {Object.<String, String>} - global variables

return "My new message";
`
    };
    exports.inputs = [{ id: 'input', name: 'Data' }];
    exports.outputs = [];
    exports.meta = {readonly: true, remove: false};

    const SharedMemory = REQUIRE('definitions/shared.js');//_main.exports;


    exports.make = function(instance, config) {

        var init = ()=>{};
        var templates = {};
        var tmpMemory = {};
        
        instance.message = async function($) {
            var session = new SharedMemory($);
            await session.ready;
            if(!(session.sessionId && session.reply && typeof session.reply == "function")){
                session = SharedMemory.empty;
				session.data = SharedMemory.extractData($);
            }
            var end = async (message) => {
                if(config.sendTo && templates["TO"]){
                    var args = {
                        to : `${templates['TO']({
                            memory : tmpMemory,
                            data : session.data ?? {},
                            session : session,
                            variables : {...instance.main.variables2,...instance.main.variables,}
                        })}`,
                        message:message.trim(),
                        mediaUrl :`${templates['MEDIA']({
                            memory : tmpMemory,
                            data : session.data ?? {},
                            session : session,
                            variables : {...instance.main.variables2,...instance.main.variables,}
                        })}`,
                        privacy:config.privacy
                    };
                    if(config.sendToContainer){
                        var target = instance.main.meta.flow[config.sendToContainer];
                        if(target){
                            return target.message(instance.newmessage(args));
                        }else{
                            return instance.throw("Sender not found");
                        }
                    }else if(session.sessionId && session.reply && typeof session.reply == "function"){
                        if(session.message && typeof session.message == "function"){
                            var ret = await session.message(args.to, args.message, args.mediaUrl,args.privacy);
                            if(ret){
                                instance.throw(ret);
                            }
                        } else {
                            return instance.throw("Can't use send message with this connector");
                        }
                    }else{
                        return instance.throw("Send To : Data don't come from a connector");
                    }
                }else{
                    if(session.sessionId && session.reply && typeof session.reply == "function"){
                        session.reply(message.trim(),null,null,`${templates['MEDIA']({
                            memory : tmpMemory,
                            data : session.data ?? {},
                            session : session,
                            variables : {...instance.main.variables2,...instance.main.variables,}
                        })}`,config.privacy);
                    }else{
                        return instance.throw("Reply : Data don't come from a connector");
                    }
                }
            }
            // execute init;
            if(config.hasCode){
                var _init;
                try {
                    _init = await init(tmpMemory, session.data,session,{...instance.main.variables2,...instance.main.variables,});
                } catch (error) {
                    if(error == "EXIT"){
                        return; // stop function
                    }
                    instance.throw(error);
                    return end(`${error}`);
                }
                if(_init && typeof _init == "string"){
                    return end(`${_init}`);
                }
            }
            // show message
            end(`${templates['TITLE']({
                memory : tmpMemory,
                data : session.data ?? {},
                session : session,
                variables : {...instance.main.variables2,...instance.main.variables,}
            })}`);
        };

        instance.configure = function() {
            if(config.code.trim())
                init = SharedMemory.createFunction("memory, data, session , variables",`return (async ()=>{;\n${config.code};\n})();`);
            else
                init = ()=>{};
            templates['TITLE'] = Tangular.compile(config.message);
            if(config.sendTo && config.to){
                templates['TO'] = Tangular.compile(config.to);
            }else{
                templates['TO'] = "";
            }
            if(config.hasMedia && config.mediaUrl){
                templates['MEDIA'] = Tangular.compile(config.mediaUrl);
            }else{
                templates['MEDIA'] = ()=>"";
            }
            instance.outputs = [];
            instance.inputs = [{ id: 'input', name: config.message || 'Data' }];
            instance.save();
        };

        instance.configure();
    };

</script>

<readme>
# readme
</readme>

<settings>
    <div class="padding">
        <div class="row m">
            <div class="col-md-12 m">
                <label class="ui-input-label">Message</label>
                <ui-component name="textarea" path="?.message" config="required:1;height:150;placeholder:@(Write your message)"></ui-component>
            </div>
            <div class="col-md-12 m">
                <ui-component name="input" path="?.privacy"
			config="type:select;dirsource:no|Off,day|24 hours,week|7 days">Disappearing</ui-component>
            </div>
            <div class="col-md-4 m">
                <ui-component name="input" path="?.sendTo" config="type:checkbox">Send To</ui-component>
            </div>
            <div class="col-md-4 m">
                <ui-component name="input" path="?.hasMedia" config="type:checkbox">With Media</ui-component>
            </div>
            <div class="col-md-4 m">
                <ui-component name="input" path="?.hasCode" config="type:checkbox">With Code</ui-component>
            </div>
        </div>
        <ui-bind path="?.hasMedia" config="show" class="hidden block col-md-12 m">
            <label class="ui-input-label">Media Url</label>
            <ui-component name="input" path="?.mediaUrl" config="required:1;placeholder:@(Media Url)"></ui-component>
            <div class="help">Max size allowed is <b>16Mb</b>.</div>
        </ui-bind>
        <ui-bind path="?.sendTo" config="show" class="hidden block col-md-8 m">
            <label class="ui-input-label">To</label>
            <ui-component name="input" path="?.to" config="required:1;placeholder:@(To)"></ui-component>
            <div class="help">Optional, you can enter the receiver, leave empty for reply.</div>
        </ui-bind>

        <ui-bind path="?.sendTo" config="show" class="hidden block col-md-4 m">
            <ui-component 
                name="input" 
                path="?.sendToContainer" 
                config="type:select;dirsource:%route_components">
                Sender
            </ui-component>
            <div class="help">Optional, select the component used to send message.</div>
        </ui-bind>
        <ui-bind path="?.hasCode" config="show" class="hidden block col-md-12 m">
            <div class="ui-input-label">Javascript Code:</div>
            <ui-component name="codemirror" path="?.code" config="type:javascript;height:250;parent:auto;margin:30;tabs:true;trim:true" class="m"></ui-component>
        </ui-bind>
    </div>
</settings>

<script>
    TOUCH(function(exports, init) {
        exports.configure = function(config, isInit) {
            config.message.replace(/\r\n?/,"\n")
            UPD('flow.data');
        }
        exports.settings = function(meta){
            var arr = [{
                id: "",
                name : "Default"
            }];

            for (var key in flow.data) {
                var tmp = flow.data[key];
                if (tmp.Component && tmp.Component.meta && tmp.Component.meta.sendMessage)
                    arr.push({
                        id: key, 
                        name: tmp.Component.name.toUpperCase() + " " + (tmp.config.info ? tmp.config.info : (tmp.config.name ? tmp.config.name : "")), 
                        note : tmp.note,
                    });
            }

            SET('%route_components', arr);

        }
    });

</script>

<style>
    .CLASS footer { padding: 10px; font-size: 12px; }

    .button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }
    .button-add:hover { background-color: #F8F8F8; }
    .button-add:active { background-color: #E0E0E0; }

    .ui-dark .button-add { border-color: #404040; color: #FFF; background-color: #202020; }
    .ui-dark .button-add:hover { background-color: #303030; }
    .ui-dark .button-add:active { background-color: #404040; }

    .switch-input-group { clear: both; height: 36px; }
    .switch-input-group > ui-component:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }
    .switch-input-group > ui-component:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }
    .switch-input-group.wide > ui-component:first-child .ui-input-control { width: 200px; }
    .switch-input-group.wide > ui-component:last-child .ui-input-control { width: calc(100% - 200px); }
    .menus { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }
    .menu { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }
    .menu > .row > .col-md-1 { height: 36px; line-height: 36px; }
    .switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }
    .switch-thead { padding: 8px; margin-bottom:4px; }
</style>

<body>
    <header>
        <i class="ICON"></i>NAME
        <ui-bind path="CONFIG.hasCode" config="show" class="hidden"><span class="ti ti-code"></span></ui-bind>
    </header>
</body>