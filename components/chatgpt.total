<script component>

	exports.id = 'chatgpt';
	exports.name = 'ChatGPT';
	exports.icon = 'ti ti-robot-alt';
	exports.author = 'Total.js';
	exports.version = '2';
	exports.group = 'Services';
	exports.config = { model: 'text-davinci-003', apikey: '' };
	exports.inputs = [{ id: 'input', name: 'Question' }];
	exports.outputs = [{ id: 'output', name: 'Answer' }, { id: 'error', name: 'Error' }];
	exports.meta = {readonly: true, remove: false};
  const SharedMemory = REQUIRE('definitions/shared.js');

	exports.make = function (instance, config) {

		const URL = 'https://api.openai.com/v1/completions';

		var model;
		var cfg;

		instance.message = async function ($) {

			var data = SharedMemory.extractData($);

			if (!data) {
				$.send('error', 'Input text is missing');
				return;
			}

			switch (cfg.model) {
				case 'text-curie-001':
				case 'text-davinci-003':
				case 'text-babbage-001':
				case 'text-ada-001':
					RESTBuilder.POST(URL, { model: cfg.model, prompt: data, temperature: 0, max_tokens: 220 }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {

						if (err) {
							$.send('error', err);
							return;
						}

						if (response && response.choices) {
							var text = response.choices[0].text;
							$.send('output', text);
						}

					});
					break;
				case 'gpt-3.5-turbo':

					var messages = data.messages || data;

					if (!(messages instanceof Array)) {
						$.send('error', 'Error: Input must be array of messages');
						return;
					}

					if (!messages[0] || !messages[0].role) {
						$.send('error', 'Error: Each message object must have message role attribute : user or assistant or system');
						return;
					}


					var url = 'https://api.openai.com/v1/chat/completions';
					RESTBuilder.POST(url, { model: cfg.model, messages: messages }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {

						if (err) {
							$.send('error', err);
							return;
						}

						if (response && response.choices) {
							var text = response.choices[0].message.content;

							$.send('output', text);
						}

					});
					break;
				case 'whisper-1':
					var path = data.path || data;

					var url = 'https://api.openai.com/v1/audio/transcriptions';
					RESTBuilder.POST(url, { model: cfg.model }).header('Authorization', 'Bearer ' + cfg.apikey).file('file', path).timeout(60000).keepalive().callback(function (err, response, output) {

						if (err) {
							$.send('error', err);
							return;
						}

						if (response && response)
							$.send('output', response);

					});

					break


			}
		};

		instance.configure = function () {
			cfg = instance.replace(config);
		};

		instance.configure();
	};
</script>

<readme>
	This component can talk to ChatGPT.
	openai

	# input

	Input will depend on selected model

	- __CPT 3.5 Turbo__
	```js

	// Object
	{
	messages : [{ role: 'user', content: 'Text' }]
	}

	// or


	// Array
	[{ role: 'assistant', content: 'Text' }]
	```

	- __Whisper__
	```js

	// Object
	{
	path : 'path-to-file'
	}

	// or


	// String
	'path-to-file'
	```

	- __Other__
	```js

	// Object
	{
	text : 'your question'
	}

	// or


	// String
	'your question'
	```


	# output

	Output also depends on selected model
	- __CPT 3.5 Turbo__
	```js
	'Response from assistant'
	```

	- __Whisper__
	```js

	// Object
	{
	text : 'transcipted text'
	}
	```
	- __Other__
	```js

	// String
	'your question'
	```
</readme>

<settings>
	<div class="padding">
		<ui-component name="input" path="?.apikey" config="camouflage:1;required:1">API key</ui-component>
		<div class="help m"><a href="https://platform.openai.com/account/api-keys" target="_blank"><i class="ti ti-external"></i>Generate API key</a></div>
		<ui-component name="input" path="?.model"
			config="type:select;dirsource:gpt-3.5-turbo|GPT 3.5 Turbo,Whisper|whisper-1,text-davinci-003|Davinci,text-curie-001|Curie,text-babbage-001|Babbage,text-ada-001|ADA">Model</ui-component>
	</div>
</settings>

<body>
	<header>
		<i class="ICON"></i>NAME
	</header>
</body>