<script component>

	exports.name = 'Queue';
	exports.group = 'Triggers';
	exports.version = '3';
	exports.icon = 'ti ti-ellipsis-h';
	exports.author = 'Total.js';
	exports.config = {};
	exports.inputs = [{ id: 'input', name: 'Input' }];
	exports.outputs = [{ id: 'output', name: 'Output' }];
	exports.meta = {readonly: true, remove: false};
	const SharedMemory = REQUIRE('definitions/shared.js');

	exports.make = function(instance) {

		var filename = PATH.databases('queue_' + instance.id + '.json');
		var isready = false;
		var current = null;
		var queue = [];
		var timeout;

		instance.queue_snapshot_force = function() {
			timeout = null;
			PATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);
		};

		instance.queue_snapshot = function() {
			timeout && clearTimeout(timeout);
			timeout = setTimeout(instance.queue_snapshot_force, 500);
			PATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);
		};

		instance.trigger = function() {
			current = null;
			instance.queue_next();
		};

		instance.queue_next = function() {

			if (current)
				return;

			current = queue[0];

			if (current) {
				var msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);
				msg.once('something', instance.queue_end);
				instance.send('output', msg);
			}

			instance.status({ pending: queue.length });
		};

		instance.queue_end = function() {
			queue.shift();
			current = null;
			instance.queue_next();
			instance.queue_snapshot();
		};

		instance.destroy = function() {
			PATH.fs.unlink(filename, NOOP);
		};

		instance.message = async function($) {
      var data = SharedMemory.extractData($);
			var session = new SharedMemory($);
      await session.ready;
			if(!(session.sessionId && session.reply && typeof session.reply == "function")){
				session.bye(true);
      }else{
				data = session.data;
			}

			queue.push({ ts: Date.now(), fromid: instance.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });
			isready && instance.queue_snapshot();
			instance.status({ pending: queue.length });
			instaend();

			if (isready && !current)
				setImmediate(instance.queue_next);
		};

		PATH.fs.readFile(filename, function(err, response) {
			if (response) {
				var arr = response.toString('utf8').parseJSON(true);
				if (arr instanceof Array) {
					if (queue.length)
						arr.push.apply(arr, queue);
					else
						queue = arr;
				}
				instance.queue_next();
			}
			isready = true;
		});
	};

</script>

<style>
	.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }
	.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }
	.CLASS button:hover { background-color: #F8F8F8; }
	.CLASS button:active { background-color: #E0E0E0; }
	.ui-dark .CLASS button { border-color: #404040; color: #FFF; }
	.ui-dark .CLASS button:hover { background-color: #303030; }
	.ui-dark .CLASS button:active { background-color: #404040; }
</style>

<script>
	FUNC.fqueue_trigger = function(el) {
		SETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });
	};
</script>

<readme>
A simple persistent queue for the incomming messages.
</readme>

<body>
	<header>
		<button class="exec" data-exec="FUNC.fqueue_trigger">Run</button>
		<i class="ICON"></i>NAME
	</header>
	<footer>
		<div class="status">Delayed messages: <b><ui-bind path="STATUS.pending" config="text:value?value.format(0):'0'"></ui-bind></b></div>
	</footer>
</body>